# 150. Evaluate Reverse Polish Notation

## Section

```elixir
# https://leetcode.com/problems/evaluate-reverse-polish-notation/

defmodule Solution do
  @spec eval_rpn(tokens :: [String.t()]) :: integer
  def eval_rpn(tokens) do
    tokens
    |> Enum.reduce([], fn x, acc ->
      if x in ["+", "-", "*", "/"] do
        evaluate_expression(acc, x)
      else
        acc ++ [String.to_integer(x)]
      end
    end)
    |> hd()
  end

  defp evaluate_expression(acc, operator) do
    result =
      acc
      |> get_numbers_to_eval()
      |> do_evaluate(operator)

    concat(acc, result)
  end

  defp do_evaluate([a, b], operator) do
    case operator do
      "/" -> div(a, b)
      "+" -> a + b
      "*" -> a * b
      "-" -> a - b
    end
  end

  defp get_numbers_to_eval(acc) do
    Enum.take(acc, -2)
  end

  defp concat(acc, value) do
    Enum.slice(acc, 0..-3) ++ [value]
  end
end
```

## Tests

```elixir
ExUnit.start(auto_run: false)

defmodule SolutionTest do
  use ExUnit.Case, async: false

  describe "solution/1" do
    test "test 1" do
      assert Solution.eval_rpn(["2", "1", "+", "3", "*"]) == 9
    end

    test "test 2" do
      assert Solution.eval_rpn(["4", "13", "5", "/", "+"]) == 6
    end

    test "test 3" do
      assert Solution.eval_rpn([
               "10",
               "6",
               "9",
               "3",
               "+",
               "-11",
               "*",
               "/",
               "*",
               "17",
               "+",
               "5",
               "+"
             ]) == 22
    end

    test "test 4" do
      assert Solution.eval_rpn(["4", "3", "-"]) == 1
    end
  end
end

ExUnit.run()
```

## Drafts

```elixir
# concat arrays

[1, 2] ++ [3, 4]
[1, 2] ++ [3]

["10", "6", "9", "3"]
# |> Enum.take(-2)
|> Enum.slice(0..-3)
```
