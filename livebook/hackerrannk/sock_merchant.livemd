<!-- livebook:{"persist_outputs":true} -->

# sock-merchant

## Problem

[link](https://www.hackerrank.com/challenges/sock-merchant/problem?isFullScreen=true&h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup)

There is a large pile of socks that must be paired by color. Given an array of integers representing the color of each sock, determine how many pairs of socks with matching colors there are.

### Example

There is one pair of color  and one of color . There are three odd socks left, one of each color. The number of pairs is .

### Function Description

Complete the sockMerchant function in the editor below.

sockMerchant has the following parameter(s):

int n: the number of socks in the pile
int ar[n]: the colors of each sock
Returns

int: the number of pairs
Input Format

The first line contains an integer , the number of socks represented in .
The second line contains  space-separated integers, , the colors of the socks in the pile.

### Constraints

where 
Sample Input

```
STDIN                       Function
-----                       --------
9                           n = 9
10 20 20 10 10 30 50 10 20  ar = [10, 20, 20, 10, 10, 30, 50, 10, 20]
```

Sample Output
`3`

## Code

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
defmodule Solution do
  def parse([_n, a]), do: parse_integer_list(a)

  def parse_integer_list(line) do
    line
    |> String.split(" ")
    |> Enum.map(&String.to_integer/1)
  end

  def to_string(result), do: Integer.to_string(result)

  def run(list) do
    list
    |> Enum.group_by(& &1)
    |> Enum.reduce(0, fn {_, list}, acc ->
      (acc + Enum.count(list) / 2)
      |> trunc()
    end)
  end
end

# IO.read(:all)
# |> String.split("\n", trim: true)
# |> Solution.parse
# |> Solution.run
# |> Solution.to_string
# |> IO.puts
```

<!-- livebook:{"output":true} -->

```
{:module, Solution, <<70, 79, 82, 49, 0, 0, 10, ...>>, {:run, 1}}
```

## Tests

```elixir
ExUnit.start(auto_run: false)

defmodule SolutionTest do
  use ExUnit.Case, async: false

  describe "solution/1" do
    test "test 1" do
      arr = [10, 20, 20, 10, 10, 30, 50, 10, 20]
      assert Solution.run(arr) == 3
    end

    test "test 2" do
      arr = [1, 1, 3, 1, 2, 1, 3, 3, 3, 3]
      assert Solution.run(arr) == 4
    end
  end
end

ExUnit.run()
```

<!-- livebook:{"output":true} -->

```
..

Finished in 0.00 seconds (0.00s async, 0.00s sync)
2 tests, 0 failures

Randomized with seed 339523
```

<!-- livebook:{"output":true} -->

```
%{excluded: 0, failures: 0, skipped: 0, total: 2}
```

## Drafts

```elixir
map = %{20 => [20, 20, 20, 20], 30 => [30, 30, 30]}

Enum.reduce(map, 0, fn {_, arr}, acc ->
  r = (Enum.count(arr) / 2) |> trunc()
  acc + r
end)
```

<!-- livebook:{"output":true} -->

```
3
```
