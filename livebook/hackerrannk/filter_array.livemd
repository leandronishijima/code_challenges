# Filter array

## Problem

[link](https://www.hackerrank.com/challenges/fp-filter-array/problem)

## Code

```elixir
defmodule Solution do
  def parse_integer_list(line) do
    Enum.map(line, &String.to_integer/1)
  end

  def run([delimiter | tail]) do
    tail
    |> Enum.filter(&(&1 < delimiter))
    |> Enum.map(&Integer.to_string/1)
    |> Enum.join("\n")
  end
end

# IO.read(:all)
# |> String.split("\n", trim: true)
# |> Solution.parse_integer_list()
# |> Solution.run
# |> IO.puts
```

## Tests

```elixir
ExUnit.start(auto_run: false)

defmodule SolutionTest do
  use ExUnit.Case, async: false

  describe "solution/1" do
    test "test 1" do
      input = [3, 10, 9, 8, 2, 7, 5, 1, 3, 0]
      assert Solution.run(input) == "2\n1\n0"
    end
  end
end

ExUnit.run()
```

## Drafts

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input = [3, 10, 9, 8, 2, 7, 5, 1, 3, 0]

[head | tail] = input
Enum.filter(tail, fn x -> x < head end)
```
